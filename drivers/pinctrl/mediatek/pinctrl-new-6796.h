/* List these attributes which could be modified for the pin */
enum {
        PINCTRL_PIN_REG_MODE,
        PINCTRL_PIN_REG_DIR,
        PINCTRL_PIN_REG_DI,
        PINCTRL_PIN_REG_DO,
        PINCTRL_PIN_REG_IES,
        PINCTRL_PIN_REG_SMT,
        PINCTRL_PIN_REG_PU,
        PINCTRL_PIN_REG_PD,
        PINCTRL_PIN_REG_PUPD,
        PINCTRL_PIN_REG_R0,
        PINCTRL_PIN_REG_R1,
        PINCTRL_PIN_REG_TDSEL,
        PINCTRL_PIN_REG_RDSEL,
		PINCTRL_PIN_REG_DRV,
        PINCTRL_PIN_REG_MAX,
};

enum {
	GPIO_BASE,
	IO_CFG_L_BASE,
	IO_CFG_B_BASE,
	IO_CFG_R_BASE,
	IO_CFG_T_BASE,
	BASE_MAX,
};





/* struct mtk_pin_field - the structure that holds the information of the field
 *                        used to describe the attribute for the pin
 * @offset:             the register offset relative to the base address
 * @mask:               the mask used to filter out the field from the register
 * @bitpos:             the start bit relative to the register
 * @next:               the indication that the field would be extended to the
                        next register
 */
struct mtk_pin_field {
        u32 offset;
        u32 mask;
        u8  bitpos;
        u8  next;
        int base_selector;
};


/* struct mtk_pin_field_calc - the structure that holds the range providing
 *                             the guide used to look up the relevant field
 * @s_pin:              the start pin within the range
 * @e_pin:              the end pin within the range
 * @s_addr:             the start address for the range
 * @x_addrs:            the address distance between two consecutive registers
 *                      within the range
 * @s_bit:              the start bit for the first register within the range
 * @x_bits:             the bit distance between two consecutive pins within
 *                      the range
 */
struct mtk_pin_field_calc {
        u16 s_pin;
        u16 e_pin;
        u32 s_addr;
        u8  x_addrs;
        u8  s_bit;
        u8  x_bits;
        int base_selector;
};


struct mtk_pinctrl {
        struct pinctrl_dev              *pctrl;
        void __iomem                    *base[BASE_MAX];
        struct device                   *dev;
        struct gpio_chip                chip;
        const struct mtk_pin_soc        *soc;
        struct mtk_eint                 *eint;
};




static const struct mtk_pin_field_calc mt6797_pin_mode_range[] = {
	{0, 261, 0x300, 0x20, 0, 4, GPIO_BASE},//10005000 GPIO_BASE
};


static const struct mtk_pin_field_calc mt6797_pin_dir_range[] = {
	{0, 261, 0x000, 0x20, 0, 1, GPIO_BASE},//10005000 GPIO_BASE
};

static const struct mtk_pin_field_calc mt6797_pin_di_range[] = {
	{0, 261, 0x200, 0x20, 0, 1, GPIO_BASE},//10005000 GPIO_BASE
};


static const struct mtk_pin_field_calc mt6797_pin_do_range[] = {
	{0, 261, 0x100, 0x20, 0, 1, GPIO_BASE},//10005000 GPIO_BASE
};

//chera dakhele 7623 zade bood PIN_FIELD15 baraie mode_range?!!!


static const struct mtk_pin_field_calc mt6797_pin_ies_range[] = {
	{28, 36, 0x000, 0x20, 0, 1, IFCFG_L_BASE},//10002000 IFCFG_L_BASE
	{37, 37, 0x000, 0x20, 1, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{38, 38, 0x000, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{39, 54, 0x000, 0x20, 12, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{55, 56, 0x010, 0x20, 0, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{57, 60, 0x000, 0x20, 8, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{61, 68, 0x010, 0x20, 8, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{69, 73, 0x000, 0x20, 12, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{74, 75, 0x010, 0x20, 7, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{76, 76, 0x010, 0x20, 16, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{77, 77, 0x010, 0x20, 18, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{78, 78, 0x010, 0x20, 17, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{79, 79, 0x010, 0x20, 19, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{80, 80, 0x010, 0x20, 22, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{81, 81, 0x010, 0x20, 21, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{82, 82, 0x010, 0x20, 20, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{83, 84, 0x010, 0x20, 23, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{85, 86, 0x010, 0x20, 16, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{87, 93, 0x000, 0x20, 25, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{94, 94, 0x000, 0x20, 27, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{95, 95, 0x010, 0x20, 6, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{96, 96, 0x010, 0x20, 5, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{97, 98, 0x000, 0x20, 10, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{99, 103, 0x000, 0x20, 20, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{105, 105, 0x000, 0x20, 26, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{106, 111, 0x000, 0x20, 2, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{112, 112, 0x020, 0x20, 20, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{113, 113, 0x020, 0x20, 14, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{114, 125, 0x020, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{126, 128, 0x020, 0x20, 17, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{129, 134, 0x020, 0x20, 25, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{135, 141, 0x010, 0x20, 9, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{142, 150, 0x000, 0x20, 6, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{151, 154, 0x010, 0x20, 2, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{155, 157, 0x020, 0x20, 21, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{178, 181, 0x000, 0x20, 6, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{183, 187, 0x000, 0x20, 18, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{188, 191, 0x000, 0x20, 14, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{192, 192, 0x010, 0x20, 19, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{193, 193, 0x010, 0x20, 18, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{194, 194, 0x010, 0x20, 17, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{195, 195, 0x010, 0x20, 16, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{196, 196, 0x010, 0x20, 15, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{197, 197, 0x010, 0x20, 14, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{198, 198, 0x010, 0x20, 13, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{199, 199, 0x010, 0x20, 12, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{200, 200, 0x010, 0x20, 11, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{201, 201, 0x010, 0x20, 10, 1, IOCFG_B_BASE},//10002c00 IOCFG_T_BASE
	{202, 202, 0x010, 0x20, 9, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{203, 203, 0x010, 0x20, 8, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{204, 204, 0x010, 0x20, 7, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{205, 205, 0x010, 0x20, 6, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{206, 206, 0x010, 0x20, 5, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{207, 207, 0x010, 0x20, 4, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{208, 208, 0x010, 0x20, 3, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{209, 209, 0x010, 0x20, 2, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{210, 210, 0x010, 0x20, 1, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{211, 211, 0x010, 0x20, 0, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{212, 215, 0x010, 0x20, 20, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{216, 219, 0x000, 0x20, 10, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{232, 233, 0x010, 0x20, 6, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{234, 245, 0x010, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{246, 249, 0x020, 0x20, 12, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{250, 253, 0x010, 0x20, 17, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{254, 254, 0x020, 0x20, 16, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{255, 256, 0x010, 0x20, 21, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{257, 261, 0x010, 0x20, 0, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE

};


static const struct mtk_pin_desc mt6797_pin_smt_range = {
	{28, 28, 0x040, 0x20, 0, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{29, 29, 0x040, 0x20, 0, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{30, 30, 0x040, 0x20, 1, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{31, 31, 0x040, 0x20, 1, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{32, 32, 0x040, 0x20, 2, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{33, 33, 0x040, 0x20, 2, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{34, 35, 0x040, 0x20, 3, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{36, 36, 0x040, 0x20, 4, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{37, 37, 0x050, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{38, 38, 0x050, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{39, 39, 0x040, 0x20, 6, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{40, 40, 0x040, 0x20, 6, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{41, 41, 0x040, 0x20, 6, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{42, 42, 0x040, 0x20, 6, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{43, 43, 0x040, 0x20, 7, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{44, 44, 0x040, 0x20, 7, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{45, 45, 0x040, 0x20, 7, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{46, 46, 0x040, 0x20, 7, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{47, 47, 0x040, 0x20, 8, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{48, 48, 0x040, 0x20, 8, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{49, 49, 0x040, 0x20, 8, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{50, 52, 0x040, 0x20, 8, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{53, 53, 0x040, 0x20, 9, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{54, 54, 0x040, 0x20, 9, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{55, 55, 0x030, 0x20, 13, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{56, 56, 0x030, 0x20, 13, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{57, 59, 0x050, 0x20, 3, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{60, 60, 0x050, 0x20, 5, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{61, 61, 0x030, 0x20, 26, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{62, 62, 0x030, 0x20, 26, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{63, 63, 0x030, 0x20, 26, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{64, 65, 0x030, 0x20, 26, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{66, 66, 0x030, 0x20, 27, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{67, 67, 0x030, 0x20, 27, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{68, 68, 0x030, 0x20, 27, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{69, 72, 0x060, 0x20, 7, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{73, 73, 0x060, 0x20, 10, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{74, 75, 0x040, 0x20, 15, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{76, 76, 0x050, 0x20, 0, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{77, 79, 0x050, 0x20, 0, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{80, 80, 0x050, 0x20, 2, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{81, 81, 0x050, 0x20, 2, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{82, 84, 0x050, 0x20, 2, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{85, 85, 0x030, 0x20, 28, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{86, 86, 0x030, 0x20, 28, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{87, 87, 0x050, 0x20, 8, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{88, 89, 0x050, 0x20, 8, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{90, 90, 0x050, 0x20, 9, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{91, 91, 0x050, 0x20, 9, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{92, 92, 0x050, 0x20, 9, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{93, 93, 0x050, 0x20, 9, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{94, 94, 0x030, 0x20, 23, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{95, 95, 0x040, 0x20, 14, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{96, 96, 0x040, 0x20, 14, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{97, 97, 0x040, 0x20, 5, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{98, 98, 0x040, 0x20, 5, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{99, 103, 0x030, 0x20, 30, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{105, 105, 0x030, 0x20, 1, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{106, 106, 0x050, 0x20, 1, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{107, 107, 0x050, 0x20, 1, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{108, 109, 0x050, 0x20, 1, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{110, 110, 0x050, 0x20, 2, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{112, 112, 0x060, 0x20, 13, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{113, 113, 0x060, 0x20, 16, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{114, 114, 0x060, 0x20, 13, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{115, 115, 0x060, 0x20, 13, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{116, 116, 0x060, 0x20, 13, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{117, 118, 0x060, 0x20, 13, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{119, 119, 0x060, 0x20, 13, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{120, 120, 0x060, 0x20, 13, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{121, 123, 0x060, 0x20, 13, 1,, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{124, 124, 0x060, 0x20, 2, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{124, 124, 0x060, 0x20, 2, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{126, 127, 0x060, 0x20, 11, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{128, 128, 0x060, 0x20, 12, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{129, 130, 0x030, 0x20, 0, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{131, 131, 0x030, 0x20, 1, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{132, 132, 0x030, 0x20, 1, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{133, 134, 0x030, 0x20, 1, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{135, 138, 0x040, 0x20, 16, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{139, 139, 0x040, 0x20, 19, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{140, 140, 0x040, 0x20, 19, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{141, 141, 0x040, 0x20, 19, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{142, 142, 0x030, 0x20, 7, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{143, 144, 0x030, 0x20, 7, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{145, 145, 0x030, 0x20, 7, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{146, 147, 0x030, 0x20, 9, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{148, 150, 0x030, 0x20, 10, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{151, 151, 0x030, 0x20, 14, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{152, 153, 0x030, 0x20, 14, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{154, 154, 0x030, 0x20, 15, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{155, 156, 0x060, 0x20, 14, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{157, 157, 0x060, 0x20, 15, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{178, 181, 0x030, 0x20, 0, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{183, 185, 0x030, 0x20, 19, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{186, 186, 0x030, 0x20, 21, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{187, 187, 0x030, 0x20, 21, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{188, 191, 0x030, 0x20, 15, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{192, 192, 0x030, 0x20, 9, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{193, 193, 0x030, 0x20, 9, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{194, 194, 0x030, 0x20, 9, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{195, 195, 0x030, 0x20, 9, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{196, 196, 0x030, 0x20, 8, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{197, 197, 0x030, 0x20, 8, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{198, 198, 0x030, 0x20, 8, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{199, 199, 0x030, 0x20, 8, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{200, 200, 0x030, 0x20, 7, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{201, 201, 0x030, 0x20, 7, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{202, 202, 0x030, 0x20, 7, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{203, 203, 0x030, 0x20, 7, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{204, 204, 0x030, 0x20, 6, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{205, 205, 0x030, 0x20, 6, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{206, 206, 0x030, 0x20, 5, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{207, 207, 0x030, 0x20, 5, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{208, 208, 0x030, 0x20, 5, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{209, 209, 0x030, 0x20, 5, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{210, 210, 0x030, 0x20, 5, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{211, 211, 0x030, 0x20, 4, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{212, 212, 0x030, 0x20, 10, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{213, 213, 0x030, 0x20, 10, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{214, 214, 0x030, 0x20, 10, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{215, 219, 0x030, 0x20, 10, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{232, 232, 0x030, 0x20, 24, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{233, 233, 0x030, 0x20, 24, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{234, 236, 0x050, 0x20, 10, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{237, 238, 0x050, 0x20, 12, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{237, 238, 0x050, 0x20, 12, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{239, 240, 0x050, 0x20, 13, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{241, 243, 0x050, 0x20, 17, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{244, 245, 0x050, 0x20, 17, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{246, 248, 0x060, 0x20, 4, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{249, 249, 0x060, 0x20, 6, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{250, 252, 0x050, 0x20, 18, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{253, 253, 0x050, 0x20, 4, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{254, 254, 0x060, 0x20, 5, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{255, 256, 0x050, 0x20, 21, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{257, 259, 0x040, 0x20, 11, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{260, 260, 0x040, 0x20, 11, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{261, 261, 0x040, 0x20, 11, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
}


static const struct mtk_pin_field_calc mt6797_pin_pu_range[] = {
	{28, 36, 0x0B0, 0x20, 0, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{39, 54, 0x0B0, 0x20, 12, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{57, 60, 0x160, 0x20, 6, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{57, 60, 0x160, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{61, 68, 0x0E0, 0x20, 8, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{69, 73, 0x170, 0x20, 6, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{76, 76, 0x0C0, 0x20, 15, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{77, 77, 0x0C0, 0x20, 15, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{78, 78, 0x0C0, 0x20, 14, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{79, 79, 0x0C0, 0x20, 16, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{80, 80, 0x0C0, 0x20, 19, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{81, 81, 0x0C0, 0x20, 18, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{82, 82, 0x0C0, 0x20, 17, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{83, 84, 0x0C0, 0x20, 20, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{85, 86, 0x160, 0x20, 16, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{87, 93, 0x160, 0x20, 14, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{94, 94, 0x0E0, 0x20, 26, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{97, 98, 0x0B0, 0x20, 10, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{94, 105, 0x0D0, 0x20, 19, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{112, 112, 0x180, 0x20, 3, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{113, 113, 0x180, 0x20, 7, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{114, 125, 0x170, 0x20, 12, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{126, 127, 0x180, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{135, 141, 0x0C0, 0x20, 6, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{142, 142, 0x0D0, 0x20, 10, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{143, 143, 0x0B0, 0x20, 11, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{144, 150, 0x0D0, 0x20, 12, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{151, 152, 0x0E0, 0x20, 2, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{153, 154, 0x0D0, 0x20, 29, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{155, 157, 0x180, 0x20, 4, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{178, 182, 0x090, 0x20, 0, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{183, 187, 0x090, 0x20, 13, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{188, 191, 0x090, 0x20, 9, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{192, 192, 0x0A0, 0x20, 19, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{193, 193, 0x0A0, 0x20, 18, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{194, 194, 0x0A0, 0x20, 17, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{195, 195, 0x0A0, 0x20, 16, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{196, 196, 0x0A0, 0x20, 15, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{197, 197, 0x0A0, 0x20, 14, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{198, 198, 0x0A0, 0x20, 13, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{199, 199, 0x0A0, 0x20, 12, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{200, 200, 0x0A0, 0x20, 11, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{201, 201, 0x0A0, 0x20, 10, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{202, 202, 0x0A0, 0x20, 9, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{203, 203, 0x0A0, 0x20, 8, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{204, 204, 0x0A0, 0x20, 7, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{205, 205, 0x0A0, 0x20, 6, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{206, 206, 0x0A0, 0x20, 5, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{207, 207, 0x0A0, 0x20, 4, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{208, 208, 0x0A0, 0x20, 3, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{209, 209, 0x0A0, 0x20, 2, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{210, 210, 0x0A0, 0x20, 1, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{211, 211, 0x0A0, 0x20, 0, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{212, 215, 0x0A0, 0x20, 20, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{216, 219, 0x090, 0x20, 5, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{232, 233, 0x0E0, 0x20, 6, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{234, 237, 0x160, 0x20, 21, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{242, 245, 0x160, 0x20, 25, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{246, 249, 0x180, 0x20, 8, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{250, 253, 0x170, 0x20, 5, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{254, 254, 0x180, 0x20, 12, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{255, 256, 0x170, 0x20, 9, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{257, 261, 0x0C0, 0x20, 0, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE

}

static const struct mtk_pin_field_calc mt6797_pin_pd_range[] = {
	{28, 36, 0x0D0, 0x20, 0, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{37, 37, 0x130, 0x20, 1, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{38, 38, 0x130, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{39, 54, 0x0D0, 0x20, 12, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{55, 56, 0x0C0, 0x20, 0, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{57, 60, 0x130, 0x20, 2, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{61, 68, 0x0C0, 0x20, 8, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{69, 73, 0x140, 0x20, 4, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{74, 75, 0x0D0, 0x20, 30, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{76, 76, 0x0E0, 0x20, 13, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{77, 77, 0x0E0, 0x20, 15, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{78, 78, 0x0E0, 0x20, 14, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{79, 79, 0x0E0, 0x20, 16, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{80, 80, 0x0E0, 0x20, 19, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{81, 81, 0x0E0, 0x20, 18, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{82, 82, 0x0E0, 0x20, 17, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{83, 84, 0x0E0, 0x20, 20, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{85, 86, 0x0C0, 0x20, 16, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{87, 93, 0x160, 0x20, 16, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{94, 94, 0x0B0, 0x20, 26, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{95, 95, 0x0D0, 0x20, 29, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{96, 96, 0x0D0, 0x20, 28, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{97, 97, 0x0D0, 0x20, 10, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{98, 98, 0x0D0, 0x20, 11, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{99, 105, 0x0B0, 0x20, 19, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{112, 113, 0x150, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{114, 125, 0x140, 0x20, 16, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{135, 141, 0x0E0, 0x20, 6, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{142, 142, 0x0B0, 0x20, 10, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{143, 143, 0x0D0, 0x20, 11, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{144, 150, 0x0B0, 0x20, 12, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{151, 154, 0x0C0, 0x20, 2, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{178, 182, 0x070, 0x20, 0, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{183, 187, 0x070, 0x20, 13, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{188, 191, 0x070, 0x20, 9, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{192, 192, 0x080, 0x20, 19, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{193, 193, 0x080, 0x20, 18, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{194, 194, 0x080, 0x20, 17, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{195, 195, 0x080, 0x20, 16, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{196, 196, 0x080, 0x20, 15, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{197, 197, 0x080, 0x20, 14, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{198, 198, 0x080, 0x20, 13, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{199, 199, 0x080, 0x20, 12, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{200, 200, 0x080, 0x20, 11, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{201, 201, 0x080, 0x20, 10, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{202, 202, 0x080, 0x20, 9, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{203, 203, 0x080, 0x20, 8, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{204, 204, 0x080, 0x20, 7, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{205, 205, 0x080, 0x20, 6, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{206, 206, 0x080, 0x20, 5, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{207, 207, 0x080, 0x20, 4, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{208, 208, 0x080, 0x20, 3, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{209, 209, 0x080, 0x20, 2, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{210, 210, 0x080, 0x20, 1, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{211, 211, 0x080, 0x20, 0, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{212, 215, 0x080, 0x20, 20, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{216, 219, 0x070, 0x20, 5, 1, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{232, 233, 0x0C0, 0x20, 6, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{234, 241, 0x130, 0x20, 23, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{242, 245, 0x140, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{246, 249, 0x150, 0x20, 2, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{250, 253, 0x140, 0x20, 9, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{254, 254, 0x150, 0x20, 6, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{255, 256, 0x140, 0x20, 13, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{257, 261, 0x0E0, 0x20, 0, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE

}



static const struct mtk_pin_field_calc mt6797_pin_pupd_range[] = {
	{106, 108, 0x100, 0x20, 3, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{109, 111, 0x100, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{114, 125, 0x100, 0x20, 6, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{126, 128, 0x100, 0x20, 24, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{129, 134, 0x100, 0x20, 18, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{155, 157, 0x100, 0x20, 27, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
}

static struct mtk_pin_field_calc mt6797_pin_r0_range[] = {
	{36, 36, 0x120, 0x20, 9, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{93, 93, 0x110, 0x20, 30, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{106, 108, 0x110, 0x20, 3, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{109, 111, 0x110, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{114, 125, 0x110, 0x20, 6, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{126, 128, 0x110, 0x20, 24, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{129, 134, 0x110, 0x20, 18, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{149, 149, 0x090, 0x20, 6, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{155, 157, 0x110, 0x20, 27, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
}

static struct mtk_pin_field_calc mt6797_pin_r1_range[] = {
	{106, 108, 0x120, 0x20, 3, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{109, 111, 0x120, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{114, 125, 0x120, 0x20, 6, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{126, 128, 0x120, 0x20, 24, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{129, 134, 0x120, 0x20, 18, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{155, 157, 0x120, 0x20, 27, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
}

static struct mtk_pin_field_calc mt6797_pin_tdsel_range[] = {
	{28, 28, 0x060, 0x20, 0, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{29, 30, 0x060, 0x20, 0, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{31, 32, 0x060, 0x20, 4, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{33, 35, 0x060, 0x20, 8, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{36, 36, 0x060, 0x20, 16, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{37, 37, 0x0B0, 0x20, 0, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{38, 38, 0x0B0, 0x20, 0, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{39, 39, 0x070, 0x20, 0, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{40, 40, 0x070, 0x20, 0, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{41, 41, 0x070, 0x20, 0, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{42, 43, 0x070, 0x20, 0, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{44, 44, 0x070, 0x20, 4, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{45, 45, 0x070, 0x20, 4, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{46, 47, 0x070, 0x20, 4, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{48, 48, 0x070, 0x20, 8, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{49, 49, 0x070, 0x20, 8, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{50, 52, 0x070, 0x20, 8, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{53, 53, 0x070, 0x20, 12, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{54, 54, 0x070, 0x20, 12, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{55, 55, 0x070, 0x20, 16, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{56, 56, 0x070, 0x20, 16, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{57, 57, 0x0B0, 0x20, 12, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{58, 58, 0x0B0, 0x20, 12, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{59, 59, 0x0B0, 0x20, 12, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{60, 60, 0x0B0, 0x20, 12, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{61, 61, 0x060, 0x20, 12, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{62, 62, 0x060, 0x20, 12, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{63, 63, 0x060, 0x20, 12, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{64, 65, 0x060, 0x20, 12, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{66, 66, 0x060, 0x20, 16, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{67, 67, 0x060, 0x20, 16, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{68, 68, 0x060, 0x20, 16, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{69, 72, 0x0E0, 0x20, 0, 4,IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{73, 73, 0x0E0, 0x20, 12, 4,IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{74, 74, 0x070, 0x20, 28, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{75, 75, 0x070, 0x20, 28, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{76, 76, 0x080, 0x20, 8, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{77, 79, 0x080, 0x20, 8, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{80, 80, 0x080, 0x20, 8, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{81, 81, 0x080, 0x20, 16, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{82, 84, 0x080, 0x20, 16, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{85, 85, 0x060, 0x20, 20, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{86, 86, 0x060, 0x20, 20, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{87, 87, 0x0B0, 0x20, 24, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{88, 89, 0x0B0, 0x20, 24, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{90, 90, 0x0B0, 0x20, 28, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{91, 91, 0x0B0, 0x20, 28, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{92, 92, 0x0B0, 0x20, 28, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{93, 93, 0x0B0, 0x20, 28, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{94, 94, 0x060, 0x20, 24, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{95, 95, 0x070, 0x20, 24, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{96, 96, 0x070, 0x20, 24, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{97, 97, 0x070, 0x20, 20, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{98, 98, 0x070, 0x20, 20, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{99, 99, 0x060, 0x20, 24, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{100, 100, 0x060, 0x20, 24, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{101, 101, 0x060, 0x20, 24, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{102, 102, 0x060, 0x20, 24, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{103, 103, 0x060, 0x20, 24, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{104, 104, 0x060, 0x20, 24, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{105, 105, 0x060, 0x20, 24, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{106, 106, 0x0B0, 0x20, 4, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{107, 107, 0x0B0, 0x20, 4, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{108, 109, 0x0B0, 0x20, 4, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{110, 110, 0x0B0, 0x20, 8, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{111, 111, 0x0B0, 0x20, 8, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{112, 112, 0x0D0, 0x20, 20, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{113, 113, 0x0D0, 0x20, 28, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{114, 114, 0x0D0, 0x20, 0, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{115, 115, 0x0D0, 0x20, 0, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{116, 116, 0x0D0, 0x20, 0, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{117, 118, 0x0D0, 0x20, 0, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{119, 119, 0x0D0, 0x20, 4, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{120, 120, 0x0D0, 0x20, 4, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{121, 123, 0x0D0, 0x20, 4, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{124, 124, 0x0D0, 0x20, 8, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{125, 125, 0x0D0, 0x20, 8, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{126, 127, 0x0D0, 0x20, 16, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{128, 128, 0x0D0, 0x20, 20, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{129, 130, 0x0C0, 0x20, 16, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{131, 131, 0x0C0, 0x20, 20, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{132, 132, 0x0C0, 0x20, 20, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{133, 134, 0x0C0, 0x20, 20, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{135, 135, 0x080, 0x20, 0, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{136, 136, 0x080, 0x20, 0, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{137, 138, 0x080, 0x20, 0, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{139, 139, 0x080, 0x20, 4, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{140, 140, 0x080, 0x20, 4, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{141, 141, 0x080, 0x20, 4, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{142, 142, 0x060, 0x20, 0, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{143, 144, 0x060, 0x20, 0, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{145, 145, 0x060, 0x20, 0, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{146, 147, 0x060, 0x20, 8, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{148, 148, 0x060, 0x20, 12, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{149, 149, 0x060, 0x20, 12, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{150, 150, 0x060, 0x20, 12, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{151, 151, 0x060, 0x20, 20, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{152, 153, 0x060, 0x20, 20, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{154, 154, 0x060, 0x20, 24, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{155, 156, 0x0D0, 0x20, 24, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{157, 157, 0x0D0, 0x20, 28, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{178, 178, 0x050, 0x20, 0, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{179, 179, 0x050, 0x20, 0, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{180, 180, 0x050, 0x20, 0, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{181, 181, 0x050, 0x20, 0, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{182, 182, 0x050, 0x20, 0, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{183, 183, 0x050, 0x20, 12, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{184, 184, 0x050, 0x20, 12, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{185, 185, 0x050, 0x20, 12, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{186, 186, 0x050, 0x20, 12, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{187, 187, 0x050, 0x20, 12, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{188, 188, 0x050, 0x20, 8, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{189, 189, 0x050, 0x20, 8, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{190, 190, 0x050, 0x20, 8, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{191, 191, 0x050, 0x20, 8, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{191, 191, 0x060, 0x20, 8, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{192, 192, 0x060, 0x20, 16, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{193, 193, 0x060, 0x20, 16, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{194, 194, 0x060, 0x20, 16, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{195, 195, 0x060, 0x20, 16, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{196, 196, 0x060, 0x20, 12, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{197, 197, 0x060, 0x20, 12, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{198, 198, 0x060, 0x20, 12, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{199, 199, 0x060, 0x20, 12, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{200, 200, 0x060, 0x20, 8, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{201, 201, 0x060, 0x20, 8, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{202, 202, 0x060, 0x20, 8, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{203, 203, 0x060, 0x20, 8, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{204, 204, 0x060, 0x20, 4, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{205, 205, 0x060, 0x20, 4, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{206, 206, 0x060, 0x20, 4, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{207, 207, 0x060, 0x20, 4, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{208, 208, 0x060, 0x20, 0, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{209, 209, 0x060, 0x20, 0, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{210, 210, 0x060, 0x20, 0, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{211, 211, 0x060, 0x20, 0, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{212, 212, 0x060, 0x20, 20, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{213, 213, 0x060, 0x20, 20, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{214, 214, 0x060, 0x20, 20, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{215, 215, 0x060, 0x20, 20, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{216, 216, 0x050, 0x20, 4, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{217, 217, 0x060, 0x20, 4, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{218, 218, 0x060, 0x20, 4, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{219, 219, 0x060, 0x20, 4, 4, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{232, 232, 0x070, 0x20, 28, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{233, 233, 0x070, 0x20, 28, 4, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{234, 234, 0x0C0, 0x20, 0, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{235, 235, 0x0D0, 0x20, 0, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{236, 236, 0x0D0, 0x20, 0, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{237, 238, 0x0D0, 0x20, 0, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{239, 240, 0x0D0, 0x20, 4, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{241, 242, 0x0D0, 0x20, 8, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{243, 243, 0x0D0, 0x20, 12, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{244, 244, 0x0D0, 0x20, 12, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{245, 245, 0x0D0, 0x20, 12, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{246, 247, 0x0E0, 0x20, 16, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{248, 248, 0x0E0, 0x20, 28, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{249, 249, 0x0E0, 0x20, 28, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{250, 250, 0x0C0, 0x20, 28, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{251, 251, 0x0C0, 0x20, 28, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{252, 252, 0x0C0, 0x20, 28, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{253, 253, 0x0C0, 0x20, 28, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{254, 254, 0x0E0, 0x20, 24, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{255, 255, 0x0F0, 0x20, 0, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{256, 256, 0x0F0, 0x20, 0, 4, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{257, 257, 0x070, 0x20, 20, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{258, 258, 0x070, 0x20, 20, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{259, 259, 0x070, 0x20, 20, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{260, 260, 0x070, 0x20, 20, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{261, 261, 0x070, 0x20, 20, 4, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
}

static const struct mtk_pin_field_calc mt6797_pin_rdsel_range[] = {
	{28, 28, 0x090, 0x20, 0, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{29, 30, 0x090, 0x20, 0, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{31, 32, 0x090, 0x20, 4, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{33, 35, 0x090, 0x20, 4, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{36, 36, 0x090, 0x20, 8, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{37, 37, 0x070, 0x20, 0, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{38, 38, 0x070, 0x20, 0, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{39, 39, 0x090, 0x20, 12, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{40, 40, 0x090, 0x20, 12, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{41, 41, 0x090, 0x20, 12, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{42, 43, 0x090, 0x20, 12, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{44, 44, 0x090, 0x20, 14, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{45, 45, 0x090, 0x20, 14, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{46, 47, 0x090, 0x20, 14, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{48, 48, 0x090, 0x20, 16, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{49, 49, 0x090, 0x20, 16, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{50, 52, 0x090, 0x20, 16, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{53, 53, 0x090, 0x20, 18, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{54, 54, 0x090, 0x20, 18, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{55, 55, 0x050, 0x20, 8, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{56, 56, 0x050, 0x20, 8, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{57, 57, 0x070, 0x20, 6, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{58, 58, 0x070, 0x20, 6, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{59, 59, 0x070, 0x20, 6, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{60, 60, 0x070, 0x20, 6, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{61, 61, 0x040, 0x20, 4, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{62, 62, 0x040, 0x20, 4, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{63, 63, 0x040, 0x20, 4, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{64, 65, 0x040, 0x20, 4, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{66, 66, 0x040, 0x20, 6, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{67, 67, 0x040, 0x20, 6, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{68, 68, 0x040, 0x20, 6, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{69, 72, 0x090, 0x20, 0, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{73, 73, 0x090, 0x20, 6, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{74, 74, 0x090, 0x20, 26, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{75, 75, 0x090, 0x20, 26, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{76, 76, 0x0A0, 0x20, 4, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{77, 79, 0x0A0, 0x20, 4, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{80, 80, 0x0A0, 0x20, 8, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{81, 81, 0x0A0, 0x20, 8, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{82, 84, 0x0A0, 0x20, 8, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{85, 85, 0x040, 0x20, 8, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{86, 86, 0x040, 0x20, 8, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{87, 87, 0x070, 0x20, 12, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{88, 89, 0x070, 0x20, 12, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{90, 90, 0x070, 0x20, 14, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{91, 91, 0x070, 0x20, 14, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{92, 92, 0x070, 0x20, 14, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{93, 93, 0x070, 0x20, 14, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{94, 94, 0x040, 0x20, 22, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{95, 95, 0x090, 0x20, 24, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{96, 96, 0x090, 0x20, 24, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{97, 97, 0x090, 0x20, 10, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{98, 98, 0x090, 0x20, 10, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{99, 99, 0x040, 0x20, 22, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{100, 100, 0x040, 0x20, 22, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{101, 101, 0x040, 0x20, 22, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{102, 102, 0x040, 0x20, 22, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{103, 103, 0x040, 0x20, 22, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{104, 104, 0x040, 0x20, 22, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{105, 105, 0x040, 0x20, 22, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{106, 106, 0x070, 0x20, 2, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{107, 107, 0x070, 0x20, 2, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{108, 109, 0x070, 0x20, 2, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{110, 110, 0x070, 0x20, 4, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{111, 111, 0x070, 0x20, 4, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{112, 112, 0x080, 0x20, 24, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{113, 113, 0x090, 0x20, 22, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{114, 114, 0x080, 0x20, 0, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{115, 115, 0x080, 0x20, 0, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{116, 116, 0x080, 0x20, 0, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{117, 118, 0x080, 0x20, 0, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{119, 119, 0x080, 0x20, 6, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{120, 120, 0x080, 0x20, 6, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{121, 122, 0x080, 0x20, 6, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{123, 123, 0x080, 0x20, 12, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{124, 124, 0x080, 0x20, 12, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{125, 127, 0x080, 0x20, 12, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{128, 128, 0x080, 0x20, 24, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{129, 130, 0x0A0, 0x20, 8, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{131, 131, 0x0A0, 0x20, 14, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{132, 132, 0x0A0, 0x20, 14, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{133, 134, 0x0A0, 0x20, 14, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{135, 135, 0x090, 0x20, 28, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{136, 136, 0x090, 0x20, 28, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{137, 138, 0x090, 0x20, 28, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{139, 139, 0x090, 0x20, 30, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{140, 140, 0x090, 0x20, 30, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{141, 141, 0x090, 0x20, 30, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{142, 142, 0x050, 0x20, 0, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{143, 144, 0x050, 0x20, 0, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{145, 145, 0x050, 0x20, 0, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{146, 147, 0x050, 0x20, 4, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{148, 148, 0x050, 0x20, 6, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{149, 149, 0x050, 0x20, 6, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{150, 150, 0x050, 0x20, 6, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{151, 151, 0x050, 0x20, 10, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{152, 153, 0x050, 0x20, 10, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{154, 154, 0x050, 0x20, 12, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{155, 156, 0x090, 0x20, 16, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{157, 157, 0x090, 0x20, 22, 6, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{178, 178, 0x040, 0x20, 0, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{179, 179, 0x040, 0x20, 0, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{180, 180, 0x040, 0x20, 0, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{181, 181, 0x040, 0x20, 0, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{182, 182, 0x040, 0x20, 0, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{183, 183, 0x040, 0x20, 18, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{184, 184, 0x040, 0x20, 18, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{185, 185, 0x040, 0x20, 18, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{186, 186, 0x040, 0x20, 18, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{187, 187, 0x040, 0x20, 18, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{188, 188, 0x040, 0x20, 16, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{189, 189, 0x040, 0x20, 16, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{190, 190, 0x040, 0x20, 16, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{191, 191, 0x040, 0x20, 16, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{192, 192, 0x040, 0x20, 10, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{193, 193, 0x040, 0x20, 10, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{194, 194, 0x040, 0x20, 10, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{195, 195, 0x040, 0x20, 10, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{196, 196, 0x040, 0x20, 8, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{197, 197, 0x040, 0x20, 8, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{198, 198, 0x040, 0x20, 8, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{199, 199, 0x040, 0x20, 8, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{200, 200, 0x040, 0x20, 6, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{201, 201, 0x040, 0x20, 6, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{202, 202, 0x040, 0x20, 6, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{203, 203, 0x040, 0x20, 6, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{204, 204, 0x040, 0x20, 4, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{205, 205, 0x040, 0x20, 4, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{206, 206, 0x040, 0x20, 4, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{207, 207, 0x040, 0x20, 4, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{208, 208, 0x040, 0x20, 2, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{209, 209, 0x040, 0x20, 2, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{210, 210, 0x040, 0x20, 2, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{211, 211, 0x040, 0x20, 2, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{212, 212, 0x040, 0x20, 12, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{213, 213, 0x040, 0x20, 12, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{214, 214, 0x040, 0x20, 12, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{215, 215, 0x040, 0x20, 12, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{216, 216, 0x040, 0x20, 14, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{217, 217, 0x040, 0x20, 14, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{218, 218, 0x040, 0x20, 14, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{219, 219, 0x040, 0x20, 14, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{232, 232, 0x050, 0x20, 14, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{233, 233, 0x050, 0x20, 14, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{234, 234, 0x070, 0x20, 16, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{235, 235, 0x070, 0x20, 16, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{236, 236, 0x070, 0x20, 16, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{237, 238, 0x070, 0x20, 16, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{239, 240, 0x070, 0x20, 18, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{241, 242, 0x070, 0x20, 20, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{243, 243, 0x070, 0x20, 22, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{244, 244, 0x070, 0x20, 22, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{245, 245, 0x070, 0x20, 22, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{246, 247, 0x0A0, 0x20, 0, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{248, 248, 0x0A0, 0x20, 6, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{249, 249, 0x0A0, 0x20, 6, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{250, 250, 0x070, 0x20, 24, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{251, 251, 0x070, 0x20, 24, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{252, 252, 0x070, 0x20, 24, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{253, 253, 0x070, 0x20, 24, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{254, 254, 0x0A0, 0x20, 4, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{255, 255, 0x070, 0x20, 28, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{256, 256, 0x070, 0x20, 28, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{257, 257, 0x090, 0x20, 22, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{258, 258, 0x090, 0x20, 22, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{259, 259, 0x090, 0x20, 22, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{260, 260, 0x090, 0x20, 22, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{261, 261, 0x090, 0x20, 22, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
}

static const struct mtk_pin_field_calc mt6797_pin_drv_range[] = {
	{28, 28, 0x0F0, 0x20, 0, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{29, 30, 0x0F0, 0x20, 0, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{31, 32, 0x0F0, 0x20, 2, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{33, 35, 0x0F0, 0x20, 4, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{36, 36, 0x0F0, 0x20, 8, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{37, 37, 0x190, 0x20, 1, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{38, 38, 0x190, 0x20, 0, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{39, 39, 0x0F0, 0x20, 12, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{40, 40, 0x0F0, 0x20, 12, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{41, 41, 0x0F0, 0x20, 12, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{42, 43, 0x0F0, 0x20, 12, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{44, 44, 0x0F0, 0x20, 14, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{45, 45, 0x0F0, 0x20, 14, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{46, 47, 0x0F0, 0x20, 14, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{48, 48, 0x0F0, 0x20, 16, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{49, 49, 0x0F0, 0x20, 16, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{50, 52, 0x0F0, 0x20, 16, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{53, 53, 0x0F0, 0x20, 18, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{54, 54, 0x0F0, 0x20, 18, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{55, 55, 0x100, 0x20, 0, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{56, 56, 0x100, 0x20, 0, 1, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{57, 57, 0x190, 0x20, 6, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{58, 58, 0x190, 0x20, 6, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{59, 59, 0x190, 0x20, 6, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{60, 60, 0x190, 0x20, 6, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{61, 61, 0x0F0, 0x20, 4, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{62, 62, 0x0F0, 0x20, 4, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{63, 63, 0x0F0, 0x20, 4, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{64, 65, 0x0F0, 0x20, 4, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{66, 66, 0x0F0, 0x20, 6, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{67, 67, 0x0F0, 0x20, 6, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{68, 68, 0x0F0, 0x20, 6, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{69, 72, 0x1B0, 0x20, 0, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{73, 73, 0x1B0, 0x20, 6, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{74, 74, 0x000, 0x20, 2, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{75, 75, 0x000, 0x20, 3, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{76, 76, 0x000, 0x20, 8, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{77, 77, 0x000, 0x20, 14, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{78, 78, 0x000, 0x20, 11, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{79, 79, 0x000, 0x20, 17, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{80, 80, 0x000, 0x20, 20, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{81, 81, 0x000, 0x20, 17, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{82, 82, 0x000, 0x20, 17, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{83, 83, 0x000, 0x20, 22, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{84, 84, 0x000, 0x20, 20, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{85, 85, 0x0F0, 0x20, 8, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{86, 86, 0x0F0, 0x20, 8, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{87, 87, 0x190, 0x20, 12, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{88, 89, 0x190, 0x20, 12, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{90, 90, 0x190, 0x20, 14, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{91, 91, 0x190, 0x20, 14, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{92, 92, 0x190, 0x20, 14, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{93, 93, 0x190, 0x20, 14, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{94, 94, 0x0F0, 0x20, 26, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{95, 95, 0x000, 0x20, 1, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{96, 96, 0x000, 0x20, 0, 1, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{97, 97, 0x000, 0x20, 10, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{98, 98, 0x000, 0x20, 10, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{99, 99, 0x0F0, 0x20, 26, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{100, 100, 0x0F0, 0x20, 26, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{101, 101, 0x0F0, 0x20, 26, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{102, 102, 0x0F0, 0x20, 26, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{103, 103, 0x0F0, 0x20, 26, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{104, 104, 0x0F0, 0x20, 26, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{105, 105, 0x0F0, 0x20, 26, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{106, 106, 0x190, 0x20, 2, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{107, 107, 0x190, 0x20, 2, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{108, 109, 0x190, 0x20, 2, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{110, 110, 0x190, 0x20, 4, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{111, 111, 0x190, 0x20, 4, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{112, 112, 0x1A0, 0x20, 19, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{113, 113, 0x1A0, 0x20, 28, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{114, 114, 0x1A0, 0x20, 0, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{115, 115, 0x1A0, 0x20, 0, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{116, 116, 0x1A0, 0x20, 0, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{117, 118, 0x1A0, 0x20, 0, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{119, 119, 0x1A0, 0x20, 3, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{120, 120, 0x1A0, 0x20, 3, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{121, 123, 0x1A0, 0x20, 3, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{124, 124, 0x1A0, 0x20, 6, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{125, 125, 0x1A0, 0x20, 6, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{126, 127, 0x1A0, 0x20, 17, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{128, 128, 0x1A0, 0x20, 19, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{129, 130, 0x1B0, 0x20, 21, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{131, 131, 0x1B0, 0x20, 24, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{132, 132, 0x1B0, 0x20, 24, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{133, 134, 0x1B0, 0x20, 24, 3, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{135, 135, 0x100, 0x20, 4, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{136, 136, 0x100, 0x20, 4, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{137, 138, 0x100, 0x20, 4, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{139, 139, 0x100, 0x20, 6, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{140, 140, 0x100, 0x20, 6, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{141, 141, 0x100, 0x20, 6, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{142, 142, 0x100, 0x20, 14, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{143, 144, 0x100, 0x20, 14, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{145, 145, 0x100, 0x20, 14, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{146, 147, 0x100, 0x20, 18, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{148, 149, 0x100, 0x20, 20, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{150, 150, 0x100, 0x20, 22, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{151, 151, 0x100, 0x20, 1, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{152, 153, 0x100, 0x20, 1, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{154, 154, 0x100, 0x20, 3, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{155, 156, 0x1A0, 0x20, 26, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{157, 157, 0x1A0, 0x20, 28, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{178, 178, 0x0B0, 0x20, 0, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{179, 179, 0x0B0, 0x20, 0, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{180, 180, 0x0B0, 0x20, 0, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{181, 181, 0x0B0, 0x20, 0, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{182, 182, 0x0B0, 0x20, 0, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{183, 183, 0x0B0, 0x20, 6, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{184, 184, 0x0B0, 0x20, 6, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{185, 185, 0x0B0, 0x20, 6, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{186, 186, 0x0B0, 0x20, 6, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{187, 187, 0x0B0, 0x20, 6, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{188, 188, 0x0B0, 0x20, 4, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{189, 189, 0x0B0, 0x20, 4, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{190, 190, 0x0B0, 0x20, 4, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{191, 191, 0x0B0, 0x20, 4, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{192, 192, 0x0B0, 0x20, 20, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{193, 193, 0x0B0, 0x20, 20, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{194, 194, 0x0B0, 0x20, 20, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{195, 195, 0x0B0, 0x20, 20, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{196, 196, 0x0B0, 0x20, 18, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{197, 197, 0x0B0, 0x20, 18, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{198, 198, 0x0B0, 0x20, 18, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{199, 199, 0x0B0, 0x20, 18, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{200, 200, 0x0B0, 0x20, 16, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{201, 201, 0x0B0, 0x20, 16, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{202, 202, 0x0B0, 0x20, 16, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{203, 203, 0x0B0, 0x20, 16, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{204, 204, 0x0B0, 0x20, 14, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{205, 205, 0x0B0, 0x20, 14, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{206, 206, 0x0B0, 0x20, 14, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{207, 207, 0x0B0, 0x20, 14, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{208, 208, 0x0B0, 0x20, 12, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{209, 209, 0x0B0, 0x20, 12, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{210, 210, 0x0B0, 0x20, 12, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{211, 211, 0x0B0, 0x20, 12, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{212, 212, 0x0B0, 0x20, 22, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{213, 213, 0x0B0, 0x20, 22, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{214, 214, 0x0B0, 0x20, 22, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{215, 215, 0x0B0, 0x20, 22, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{216, 216, 0x0B0, 0x20, 2, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{217, 217, 0x0B0, 0x20, 2, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{218, 218, 0x0B0, 0x20, 2, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{219, 219, 0x0B0, 0x20, 2, 2, IOCFG_T_BASE},//10002c00 IOCFG_T_BASE
	{232, 232, 0x100, 0x20, 5, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{233, 233, 0x100, 0x20, 5, 2, IOCFG_R_BASE},//10002800 IOCFG_R_BASE
	{234, 235, 0x190, 0x20, 16, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{236, 236, 0x190, 0x20, 16, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{237, 237, 0x190, 0x20, 16, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{238, 238, 0x190, 0x20, 16, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{239, 240, 0x190, 0x20, 19, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{241, 241, 0x190, 0x20, 21, 1, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{242, 242, 0x190, 0x20, 22, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{243, 243, 0x190, 0x20, 22, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{244, 244, 0x190, 0x20, 22, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{245, 245, 0x190, 0x20, 22, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{246, 247, 0x1B0, 0x20, 8, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{248, 248, 0x1B0, 0x20, 14, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{249, 249, 0x1B0, 0x20, 14, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{250, 250, 0x190, 0x20, 26, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{251, 251, 0x190, 0x20, 26, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{252, 252, 0x190, 0x20, 26, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{253, 253, 0x190, 0x20, 26, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{254, 254, 0x1B0, 0x20, 12, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{255, 255, 0x190, 0x20, 28, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{256, 256, 0x190, 0x20, 28, 2, IOCFG_B_BASE},//10002400 IOCFG_B_BASE
	{257, 259, 0x0F0, 0x20, 22, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{260, 260, 0x0F0, 0x20, 22, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
	{261, 261, 0x0F0, 0x20, 22, 2, IOCFG_L_BASE},//10002000 IOCFG_L_BASE
}


static const struct mtk_pin_reg_calc mt6797_reg_cals[PINCTRL_PIN_REG_MAX] = {
		[PINCTRL_PIN_REG_MODE] = MTK_RANGE(mt6797_pin_mode_range),
		[PINCTRL_PIN_REG_DIR] = MTK_RANGE(mt6797_pin_dir_range),
		[PINCTRL_PIN_REG_DI] = MTK_RANGE(mt6797_pin_di_range),
		[PINCTRL_PIN_REG_DO] = MTK_RANGE(mt6797_pin_do_range),
		[PINCTRL_PIN_REG_IES] = MTK_RANGE(mt6797_pin_ies_range),
		[PINCTRL_PIN_REG_SMT] = MTK_RANGE(mt6797_pin_smt_range),
		[PINCTRL_PIN_REG_PU] = MTK_RANGE(mt6797_pin_pu_range),
		[PINCTRL_PIN_REG_PD] = MTK_RANGE(mt6797_pin_pd_range),
		[PINCTRL_PIN_REG_PUPD] = MTK_RANGE(mt6797_pin_pupd_range),
		[PINCTRL_PIN_REG_R0] = MTK_RANGE(mt6797_pin_r0_range),
		[PINCTRL_PIN_REG_R1] = MTK_RANGE(mt6797_pin_r1_range),
		[PINCTRL_PIN_REG_TDSEL] = MTK_RANGE(mt6797_pin_tdsel_range),
		[PINCTRL_PIN_REG_RDSEL] = MTK_RANGE(mt6797_pin_rdsel_range),
		[PINCTRL_PIN_REG_DRV] = MTK_RANGE(mt6797_pin_drv_range),
};



static const struct mtk_pin_desc mt6797_pins[] = {

	MT6797_PIN(0, "RDP2", , ),
	MT6797_PIN(1, "RDN2", , ),
	MT6797_PIN(2, "RDP0", , ),
	MT6797_PIN(3, "RDN0", , ),
	MT6797_PIN(4, "RCP", , ),
	MT6797_PIN(5, "RCN", , ),
	MT6797_PIN(6, "RDP1", , ),
	MT6797_PIN(7, "RDN1", , ),
	MT6797_PIN(8, "RDP3", , ),
	MT6797_PIN(9, "RDN3", , ),
	MT6797_PIN(10, "RDP2_A", , ),
	MT6797_PIN(11, "RDN2_A", , ),
	MT6797_PIN(12, "RDP0_A", , ),
	MT6797_PIN(13, "RDN0_A", , ),
	MT6797_PIN(14, "RCP_A", , ),
	MT6797_PIN(15, "RCN_A", , ),
	MT6797_PIN(16, "RDP1_A", , ),
	MT6797_PIN(17, "RDN1_A", , ),
	MT6797_PIN(18, "RDP3_A", , ),
	MT6797_PIN(19, "RDN3_A", , ),
	MT6797_PIN(20, "RDP1_C", , ),
	MT6797_PIN(21, "RDN1_C", , ),
	MT6797_PIN(22, "RDP0_B", , ),
	MT6797_PIN(23, "RDN0_B", , ),
	MT6797_PIN(24, "RCP_B", , ),
	MT6797_PIN(25, "RCN_B", , ),
	MT6797_PIN(26, "RDP1_B", , ),
	MT6797_PIN(27, "RDN1_B", , ),
	MT6797_PIN(28, "CAM_PDN0", , ),
	MT6797_PIN(29, "CAM_PDN1", , ),
	MT6797_PIN(30, "CAM_CLK0", , ),
	MT6797_PIN(31, "CAM_CLK1", , ),
	MT6797_PIN(32, "CAM_RST0", , ),
	MT6797_PIN(33, "CAM_RST1", , ),
	MT6797_PIN(34, "CAM_PDN2", , ),
	MT6797_PIN(35, "CAM_RST2", , ),
	MT6797_PIN(36, "CAM_CLK2", , ),
	MT6797_PIN(37, "SCL0", , ),
	MT6797_PIN(38, "SDA0", , ),
	MT6797_PIN(39, "DPI_D0", , ),
	MT6797_PIN(40, "DPI_D1", , ),
	MT6797_PIN(41, "DPI_D2", , ),
	MT6797_PIN(42, "DPI_D3", , ),
	MT6797_PIN(43, "DPI_D4", , ),
	MT6797_PIN(44, "DPI_D5", , ),
	MT6797_PIN(45, "DPI_D6", , ),
	MT6797_PIN(46, "DPI_D7", , ),
	MT6797_PIN(47, "DPI_D8", , ),
	MT6797_PIN(48, "DPI_D9", , ),
	MT6797_PIN(49, "DPI_D10", , ),
	MT6797_PIN(50, "DPI_D11", , ),
	MT6797_PIN(51, "DPI_DE", , ),
	MT6797_PIN(52, "DPI_CK", , ),
	MT6797_PIN(53, "DPI_HSYNC", , ),
	MT6797_PIN(54, "DPI_VSYNC", , ),
	MT6797_PIN(55, "SCL1", , ),
	MT6797_PIN(56, "SDA1", , ),
	MT6797_PIN(57, "SPI0_CK", , ),
	MT6797_PIN(58, "SPI0_MI", , ),
	MT6797_PIN(59, "SPI0_MO", , ),
	MT6797_PIN(60, "SPI0_CS", , ),
	MT6797_PIN(61, "EINT0", , ),
	MT6797_PIN(62, "EINT1", , ),
	MT6797_PIN(63, "EINT2", , ),
	MT6797_PIN(64, "EINT3", , ),
	MT6797_PIN(65, "EINT4", , ),
	MT6797_PIN(66, "EINT5", , ),
	MT6797_PIN(67, "EINT6", , ),
	MT6797_PIN(68, "EINT7", , ),
	MT6797_PIN(69, "I2S0_LRCK", , ),
	MT6797_PIN(70, "I2S0_BCK", , ),
	MT6797_PIN(71, "I2S0_MCK", , ),
	MT6797_PIN(72, "I2S0_DI", , ),
	MT6797_PIN(73, "I2S3_DO", , ),
	MT6797_PIN(74, "SCL3", , ),
	MT6797_PIN(75, "SDA3", , ),
	MT6797_PIN(76, "CONN_HRST_B", , ),
	MT6797_PIN(77, "CONN_TOP_CLK", , ),
	MT6797_PIN(78, "CONN_TOP_DATA", , ),
	MT6797_PIN(79, "CONN_WB_PTA", , ),
	MT6797_PIN(80, "CONN_WF_CTRL0", , ),
	MT6797_PIN(81, "CONN_WF_CTRL1", , ),
	MT6797_PIN(82, "CONN_WF_CTRL2", , ),
	MT6797_PIN(83, "CONN_BT_CLK", , ),
	MT6797_PIN(84, "CONN_BT_DATA", , ),
	MT6797_PIN(85, "EINT8", , ),
	MT6797_PIN(86, "EINT9", , ),
	MT6797_PIN(87, "EINT10", , ),
	MT6797_PIN(88, "EINT11", , ),
	MT6797_PIN(89, "EINT12", , ),
	MT6797_PIN(90, "EINT13", , ),
	MT6797_PIN(91, "EINT14", , ),
	MT6797_PIN(92, "EINT15", , ),
	MT6797_PIN(93, "EINT16", , ),
	MT6797_PIN(94, "DRVBUS", , ),
	MT6797_PIN(95, "SDA2", , ),
	MT6797_PIN(96, "SCL2", , ),
	MT6797_PIN(97, "URXD0", , ),
	MT6797_PIN(98, "UTXD0", , ),
	MT6797_PIN(99, "RTC32K_CK", , ),
	MT6797_PIN(100, "SRCLKENAI0", , ),
	MT6797_PIN(101, "SRCLKENAI1", , ),
	MT6797_PIN(102, "SRCLKENA0", , ),
	MT6797_PIN(103, "SRCLKENA1", , ),
	MT6797_PIN(104, "SYSRSTB", , ),
	MT6797_PIN(105, "WATCHDOG", , ),
	MT6797_PIN(106, "KPROW0", , ),
	MT6797_PIN(107, "KPROW1", , ),
	MT6797_PIN(108, "KPROW2", , ),
	MT6797_PIN(109, "KPCOL0", , ),
	MT6797_PIN(110, "KPCOL1", , ),
	MT6797_PIN(111, "KPCOL2", , ),
	MT6797_PIN(112, "INT_SIM1", , ),
	MT6797_PIN(113, "INT_SIM2", , ),
	MT6797_PIN(114, "MSDC0_DAT0", , ),
	MT6797_PIN(115, "MSDC0_DAT1", , ),
	MT6797_PIN(116, "MSDC0_DAT2", , ),
	MT6797_PIN(117, "MSDC0_DAT3", , ),
	MT6797_PIN(118, "MSDC0_DAT4", , ),
	MT6797_PIN(119, "MSDC0_DAT5", , ),
	MT6797_PIN(120, "MSDC0_DAT6", , ),
	MT6797_PIN(121, "MSDC0_DAT7", , ),
	MT6797_PIN(122, "MSDC0_CMD", , ),
	MT6797_PIN(123, "MSDC0_CLK", , ),
	MT6797_PIN(124, "MSDC0_DSL", , ),
	MT6797_PIN(125, "MSDC0_RSTB", , ),
	MT6797_PIN(126, "SIM1_SCLK", , ),
	MT6797_PIN(181, "IDDIG", , ),
	MT6797_PIN(182, "TESTMODE", , ),
	MT6797_PIN(183, "RFIC0_BSI_CK", , ),
	MT6797_PIN(184, "RFIC0_BSI_EN", , ),
	MT6797_PIN(185, "RFIC0_BSI_D0", , ),
	MT6797_PIN(186, "RFIC0_BSI_D1", , ),
	MT6797_PIN(187, "RFIC0_BSI_D2", , ),
	MT6797_PIN(188, "MISC_MIPI_CK_0", , ),
	MT6797_PIN(189, "MISC_MIPI_DO_0", , ),
	MT6797_PIN(190, "MISC_MIPI_CK_1", , ),
	MT6797_PIN(191, "MISC_MIPI_DO_1", , ),
	MT6797_PIN(192, "BPI_BUS4", , ),
	MT6797_PIN(193, "BPI_BUS5", , ),
	MT6797_PIN(194, "BPI_BUS6", , ),
	MT6797_PIN(195, "BPI_BUS7", , ),
	MT6797_PIN(196, "BPI_BUS8", , ),
	MT6797_PIN(197, "BPI_BUS9", , ),
	MT6797_PIN(198, "BPI_BUS10", , ),
	MT6797_PIN(199, "BPI_BUS11", , ),
	MT6797_PIN(200, "BPI_BUS12_ANT0", , ),
	MT6797_PIN(201, "BPI_BUS13_ANT1", , ),
	MT6797_PIN(202, "BPI_BUS14_ANT2", , ),
	MT6797_PIN(203, "BPI_BUS15_ANT3", , ),
	MT6797_PIN(204, "BPI_BUS16_VM0", , ),
	MT6797_PIN(205, "BPI_BUS17_VM1", , ),
	MT6797_PIN(206, "BPI_BUS18_SWP0", , ),
	MT6797_PIN(207, "BPI_BUS19_SWP1", , ),
	MT6797_PIN(208, "BPI_BUS20_SWP2", , ),
	MT6797_PIN(209, "BPI_BUS21_SWP3", , ),
	MT6797_PIN(210, "BPI_BUS22_DET0", , ),
	MT6797_PIN(211, "BPI_BUS23_DET1", , ),
	MT6797_PIN(212, "BPI_BUS0", , ),
	MT6797_PIN(213, "BPI_BUS1", , ),
	MT6797_PIN(214, "BPI_BUS2", , ),
	MT6797_PIN(215, "BPI_BUS3", , ),
	MT6797_PIN(216, "MISC_MIPI_CK_2", , ),
	MT6797_PIN(217, "MISC_MIPI_DO_2", , ),
	MT6797_PIN(218, "MISC_MIPI_CK_3", , ),
	MT6797_PIN(219, "MISC_MIPI_DO_3", , ),
	MT6797_PIN(220, "WF_IP", , ),
	MT6797_PIN(221, "WF_IN", , ),
	MT6797_PIN(222, "WF_QP", , ),
	MT6797_PIN(223, "WF_QN", , ),
	MT6797_PIN(224, "BT_IP", , ),
	MT6797_PIN(225, "BT_IN", , ),
	MT6797_PIN(226, "BT_QP", , ),
	MT6797_PIN(227, "BT_QN", , ),
	MT6797_PIN(228, "GPS_IP", , ),
	MT6797_PIN(229, "GPS_IN", , ),
	MT6797_PIN(230, "GPS_QP", , ),
	MT6797_PIN(231, "GPS_QN", , ),
	MT6797_PIN(232, "URXD1", , ),
	MT6797_PIN(233, "UTXD1", , ),
	MT6797_PIN(234, "SPI1_CK", , ),
	MT6797_PIN(235, "SPI1_MI", , ),
	MT6797_PIN(236, "SPI1_MO", , ),
	MT6797_PIN(237, "SPI1_CS", , ),
	MT6797_PIN(238, "SDA4", , ),
	MT6797_PIN(239, "SCL4", , ),
	MT6797_PIN(240, "SDA5", , ),
	MT6797_PIN(241, "SCL5", , ),
	MT6797_PIN(242, "SPI2_CK", , ),
	MT6797_PIN(243, "SPI2_MI", , ),
	MT6797_PIN(244, "SPI2_MO", , ),
	MT6797_PIN(245, "SPI2_CS", , ),
	MT6797_PIN(246, "I2S1_LRCK", , ),
	MT6797_PIN(247, "I2S1_BCK", , ),
	MT6797_PIN(248, "I2S2_DI", , ),
	MT6797_PIN(249, "I2S1_DO", , ),
	MT6797_PIN(250, "SPI3_MI", , ),
	MT6797_PIN(251, "SPI3_MO", , ),
	MT6797_PIN(252, "SPI3_CK", , ),
	MT6797_PIN(253, "SPI3_CS", , ),
	MT6797_PIN(254, "I2S1_MCK", , ),
	MT6797_PIN(255, "AUD_INTN", , ),
	MT6797_PIN(256, "AUD_PDN", , ),
	MT6797_PIN(257, "JTMS", , ),
	MT6797_PIN(258, "JTCK", , ),
	MT6797_PIN(259, "JTDI", , ),
	MT6797_PIN(260, "JTDO", , ),
	MT6797_PIN(261, "JTRST_B", , ),
}


static const struct mtk_pin_soc mt7622_data = {
        .reg_cal = mt6797_reg_cals,
        .pins = mt6797_pins,
        .npins = ARRAY_SIZE(mt6797_pins),
        // .grps = mt7622_groups,
        // .ngrps = ARRAY_SIZE(mt7622_groups),
        // .funcs = mt7622_functions,
        // .nfuncs = ARRAY_SIZE(mt7622_functions),
        // .eint_hw = &mt7622_eint_hw,
};



static void mtk_w32(struct mtk_pinctrl *pctl, u32 reg, u32 val, int base_selector)
{
	writel_relaxed(val, pctl->base[base_selector] + reg);
}

static u32 mtk_r32(struct mtk_pinctrl *pctl, u32 reg, int base_selector)
{
	return readl_relaxed(pctl->base[base_selector] + reg);
}

static void mtk_rmw(struct mtk_pinctrl *pctl, u32 reg, u32 mask, u32 set, int base_selector)
{
	u32 val;

	val = mtk_r32(pctl, reg, base_selector);
	val &= ~mask;
	val |= set;
	mtk_w32(pctl, reg, val, base_selector);
}

static int mtk_hw_pin_field_lookup(struct mtk_pinctrl *hw, int pin,
				   const struct mtk_pin_reg_calc *rc,
				   struct mtk_pin_field *pfd)
{
	const struct mtk_pin_field_calc *c, *e;
	u32 bits;

	c = rc->range;
	e = c + rc->nranges;

	while (c < e) {
		if (pin >= c->s_pin && pin <= c->e_pin)
			break;
		c++;
	}

	if (c >= e) {
		dev_err(hw->dev, "Out of range for pin = %d\n", pin);
		return -EINVAL;
	}

	/* Caculated bits as the overall offset the pin is located at */
	bits = c->s_bit + (pin - c->s_pin) * (c->x_bits);

	/* Fill pfd from bits and 32-bit register applied is assumed */
	pfd->offset = c->s_addr + c->x_addrs * (bits / 32);
	pfd->bitpos = bits % 32;
	pfd->mask = (1 << c->x_bits) - 1;
	pfd->base_selector = c->base_selector;

	/* pfd->next is used for indicating that bit wrapping-around happens
	 * which requires the manipulation for bit 0 starting in the next
	 * register to form the complete field read/write.
	 */
	pfd->next = pfd->bitpos + c->x_bits - 1 > 31 ? c->x_addrs : 0;

	return 0;
}

static int mtk_hw_pin_field_get(struct mtk_pinctrl *hw, int pin,
				int field, struct mtk_pin_field *pfd)
{
	const struct mtk_pin_reg_calc *rc;

	if (field < 0 || field >= PINCTRL_PIN_REG_MAX) {
		dev_err(hw->dev, "Invalid Field %d\n", field);
		return -EINVAL;
	}

	if (hw->soc->reg_cal && hw->soc->reg_cal[field].range) {
		rc = &hw->soc->reg_cal[field];
	} else {
		dev_err(hw->dev, "Undefined range for field %d\n", field);
		return -EINVAL;
	}

	return mtk_hw_pin_field_lookup(hw, pin, rc, pfd);
}

static void mtk_hw_bits_part(struct mtk_pin_field *pf, int *h, int *l)
{
	*l = 32 - pf->bitpos;
	*h = get_count_order(pf->mask) - *l;
}

static void mtk_hw_write_cross_field(struct mtk_pinctrl *hw,
				     struct mtk_pin_field *pf, int value)
{
	int nbits_l, nbits_h;

	mtk_hw_bits_part(pf, &nbits_h, &nbits_l);

	mtk_rmw(hw, pf->offset, pf->mask << pf->bitpos,
		(value & pf->mask) << pf->bitpos, pf->base_selector);

	mtk_rmw(hw, pf->offset + pf->next, BIT(nbits_h) - 1,
		(value & pf->mask) >> nbits_l, pf->base_selector);
}

static void mtk_hw_read_cross_field(struct mtk_pinctrl *hw,
				    struct mtk_pin_field *pf, int *value)
{
	int nbits_l, nbits_h, h, l;

	mtk_hw_bits_part(pf, &nbits_h, &nbits_l);

	l  = (mtk_r32(hw, pf->offset, pf->base_selector) >> pf->bitpos) & (BIT(nbits_l) - 1);
	h  = (mtk_r32(hw, pf->offset + pf->next, pf->base_selector)) & (BIT(nbits_h) - 1);

	*value = (h << nbits_l) | l;
}

static int mtk_hw_set_value(struct mtk_pinctrl *hw, int pin, int field,
			    int value)
{
	struct mtk_pin_field pf;
	int err;

	err = mtk_hw_pin_field_get(hw, pin, field, &pf);
	if (err)
		return err;

	if (!pf.next)
		mtk_rmw(hw, pf.offset, pf.mask << pf.bitpos,
			(value & pf.mask) << pf.bitpos, pf.base_selector);
	else
		mtk_hw_write_cross_field(hw, &pf, value, pf.base_selector);

	return 0;
}

static int mtk_hw_get_value(struct mtk_pinctrl *hw, int pin, int field,
			    int *value)
{
	struct mtk_pin_field pf;
	int err;

	err = mtk_hw_pin_field_get(hw, pin, field, &pf);
	if (err)
		return err;

	if (!pf.next)
		*value = (mtk_r32(hw, pf.offset, pf.base_selector) >> pf.bitpos) & pf.mask;
	else
		mtk_hw_read_cross_field(hw, &pf, value, pf.base_selector);

	return 0;
}

static int mtk_pinmux_set_mux(struct pinctrl_dev *pctldev,
			      unsigned int selector, unsigned int group)
{
	struct mtk_pinctrl *hw = pinctrl_dev_get_drvdata(pctldev);
	struct function_desc *func;
	struct group_desc *grp;
	int i;

	func = pinmux_generic_get_function(pctldev, selector);
	if (!func)
		return -EINVAL;

	grp = pinctrl_generic_get_group(pctldev, group);
	if (!grp)
		return -EINVAL;

	dev_dbg(pctldev->dev, "enable function %s group %s\n",
		func->name, grp->name);

	for (i = 0; i < grp->num_pins; i++) {
		int *pin_modes = grp->data;

		mtk_hw_set_value(hw, grp->pins[i], PINCTRL_PIN_REG_MODE,
				 pin_modes[i]);
	}

	return 0;
}

static int mtk_pinmux_gpio_request_enable(struct pinctrl_dev *pctldev,
					  struct pinctrl_gpio_range *range,
					  unsigned int pin)
{
	struct mtk_pinctrl *hw = pinctrl_dev_get_drvdata(pctldev);

	return mtk_hw_set_value(hw, pin, PINCTRL_PIN_REG_MODE, MTK_GPIO_MODE);
}

static int mtk_pinmux_gpio_set_direction(struct pinctrl_dev *pctldev,
					 struct pinctrl_gpio_range *range,
					 unsigned int pin, bool input)
{
	struct mtk_pinctrl *hw = pinctrl_dev_get_drvdata(pctldev);

	/* hardware would take 0 as input direction */
	return mtk_hw_set_value(hw, pin, PINCTRL_PIN_REG_DIR, !input);
}

static int mtk_pinconf_get(struct pinctrl_dev *pctldev,
			   unsigned int pin, unsigned long *config)
{
	struct mtk_pinctrl *hw = pinctrl_dev_get_drvdata(pctldev);
	u32 param = pinconf_to_config_param(*config);
	int val, val2, err, reg, ret = 1;

	switch (param) {
	case PIN_CONFIG_BIAS_DISABLE:
		err = mtk_hw_get_value(hw, pin, PINCTRL_PIN_REG_PU, &val);
		if (err)
			return err;

		err = mtk_hw_get_value(hw, pin, PINCTRL_PIN_REG_PD, &val2);
		if (err)
			return err;

		if (val || val2)
			return -EINVAL;

		break;
	case PIN_CONFIG_BIAS_PULL_UP:
	case PIN_CONFIG_BIAS_PULL_DOWN:
	case PIN_CONFIG_SLEW_RATE:
		reg = (param == PIN_CONFIG_BIAS_PULL_UP) ?
		      PINCTRL_PIN_REG_PU :
		      (param == PIN_CONFIG_BIAS_PULL_DOWN) ?
		      PINCTRL_PIN_REG_PD : PINCTRL_PIN_REG_SR;

		err = mtk_hw_get_value(hw, pin, reg, &val);
		if (err)
			return err;

		if (!val)
			return -EINVAL;

		break;
	case PIN_CONFIG_INPUT_ENABLE:
	case PIN_CONFIG_OUTPUT_ENABLE:
		err = mtk_hw_get_value(hw, pin, PINCTRL_PIN_REG_DIR, &val);
		if (err)
			return err;

		/* HW takes input mode as zero; output mode as non-zero */
		if ((val && param == PIN_CONFIG_INPUT_ENABLE) ||
		    (!val && param == PIN_CONFIG_OUTPUT_ENABLE))
			return -EINVAL;

		break;
	case PIN_CONFIG_INPUT_SCHMITT_ENABLE:
		err = mtk_hw_get_value(hw, pin, PINCTRL_PIN_REG_DIR, &val);
		if (err)
			return err;

		err = mtk_hw_get_value(hw, pin, PINCTRL_PIN_REG_SMT, &val2);
		if (err)
			return err;

		if (val || !val2)
			return -EINVAL;

		break;
	case PIN_CONFIG_DRIVE_STRENGTH:
		err = mtk_hw_get_value(hw, pin, PINCTRL_PIN_REG_E4, &val);
		if (err)
			return err;

		err = mtk_hw_get_value(hw, pin, PINCTRL_PIN_REG_E8, &val2);
		if (err)
			return err;

		/* 4mA when (e8, e4) = (0, 0); 8mA when (e8, e4) = (0, 1)
		 * 12mA when (e8, e4) = (1, 0); 16mA when (e8, e4) = (1, 1)
		 */
		ret = ((val2 << 1) + val + 1) * 4;

		break;
	case MTK_PIN_CONFIG_TDSEL:
	case MTK_PIN_CONFIG_RDSEL:
		reg = (param == MTK_PIN_CONFIG_TDSEL) ?
		       PINCTRL_PIN_REG_TDSEL : PINCTRL_PIN_REG_RDSEL;

		err = mtk_hw_get_value(hw, pin, reg, &val);
		if (err)
			return err;

		ret = val;

		break;
	default:
		return -ENOTSUPP;
	}

	*config = pinconf_to_config_packed(param, ret);

	return 0;
}

static int mtk_pinconf_set(struct pinctrl_dev *pctldev, unsigned int pin,
			   unsigned long *configs, unsigned int num_configs)
{
	struct mtk_pinctrl *hw = pinctrl_dev_get_drvdata(pctldev);
	u32 reg, param, arg;
	int cfg, err = 0;

	for (cfg = 0; cfg < num_configs; cfg++) {
		param = pinconf_to_config_param(configs[cfg]);
		arg = pinconf_to_config_argument(configs[cfg]);

		switch (param) {
		case PIN_CONFIG_BIAS_DISABLE:
		case PIN_CONFIG_BIAS_PULL_UP:
		case PIN_CONFIG_BIAS_PULL_DOWN:
			arg = (param == PIN_CONFIG_BIAS_DISABLE) ? 0 :
			       (param == PIN_CONFIG_BIAS_PULL_UP) ? 1 : 2;

			err = mtk_hw_set_value(hw, pin, PINCTRL_PIN_REG_PU,
					       arg & 1);
			if (err)
				goto err;

			err = mtk_hw_set_value(hw, pin, PINCTRL_PIN_REG_PD,
					       !!(arg & 2));
			if (err)
				goto err;
			break;
		case PIN_CONFIG_OUTPUT_ENABLE:
			err = mtk_hw_set_value(hw, pin, PINCTRL_PIN_REG_SMT,
					       MTK_DISABLE);
			if (err)
				goto err;
			/* else: fall through */
		case PIN_CONFIG_INPUT_ENABLE:
		case PIN_CONFIG_SLEW_RATE:
			reg = (param == PIN_CONFIG_SLEW_RATE) ?
			       PINCTRL_PIN_REG_SR : PINCTRL_PIN_REG_DIR;

			arg = (param == PIN_CONFIG_INPUT_ENABLE) ? 0 :
			      (param == PIN_CONFIG_OUTPUT_ENABLE) ? 1 : arg;
			err = mtk_hw_set_value(hw, pin, reg, arg);
			if (err)
				goto err;

			break;
		case PIN_CONFIG_OUTPUT:
			err = mtk_hw_set_value(hw, pin, PINCTRL_PIN_REG_DIR,
					       MTK_OUTPUT);
			if (err)
				goto err;

			err = mtk_hw_set_value(hw, pin, PINCTRL_PIN_REG_DO,
					       arg);
			if (err)
				goto err;
			break;
		case PIN_CONFIG_INPUT_SCHMITT_ENABLE:
			/* arg = 1: Input mode & SMT enable ;
			 * arg = 0: Output mode & SMT disable
			 */
			arg = arg ? 2 : 1;
			err = mtk_hw_set_value(hw, pin, PINCTRL_PIN_REG_DIR,
					       arg & 1);
			if (err)
				goto err;

			err = mtk_hw_set_value(hw, pin, PINCTRL_PIN_REG_SMT,
					       !!(arg & 2));
			if (err)
				goto err;
			break;
		case PIN_CONFIG_DRIVE_STRENGTH:
			/* 4mA when (e8, e4) = (0, 0);
			 * 8mA when (e8, e4) = (0, 1);
			 * 12mA when (e8, e4) = (1, 0);
			 * 16mA when (e8, e4) = (1, 1)
			 */
			if (!(arg % 4) && (arg >= 4 && arg <= 16)) {
				arg = arg / 4 - 1;
				err = mtk_hw_set_value(hw, pin,
						       PINCTRL_PIN_REG_E4,
						       arg & 0x1);
				if (err)
					goto err;

				err = mtk_hw_set_value(hw, pin,
						       PINCTRL_PIN_REG_E8,
						       (arg & 0x2) >> 1);
				if (err)
					goto err;
			} else {
				err = -ENOTSUPP;
			}
			break;
		case MTK_PIN_CONFIG_TDSEL:
		case MTK_PIN_CONFIG_RDSEL:
			reg = (param == MTK_PIN_CONFIG_TDSEL) ?
			       PINCTRL_PIN_REG_TDSEL : PINCTRL_PIN_REG_RDSEL;

			err = mtk_hw_set_value(hw, pin, reg, arg);
			if (err)
				goto err;
			break;
		default:
			err = -ENOTSUPP;
		}
	}
err:
	return err;
}

static int mtk_pinconf_group_get(struct pinctrl_dev *pctldev,
				 unsigned int group, unsigned long *config)
{
	const unsigned int *pins;
	unsigned int i, npins, old = 0;
	int ret;

	ret = pinctrl_generic_get_group_pins(pctldev, group, &pins, &npins);
	if (ret)
		return ret;

	for (i = 0; i < npins; i++) {
		if (mtk_pinconf_get(pctldev, pins[i], config))
			return -ENOTSUPP;

		/* configs do not match between two pins */
		if (i && old != *config)
			return -ENOTSUPP;

		old = *config;
	}

	return 0;
}

static int mtk_pinconf_group_set(struct pinctrl_dev *pctldev,
				 unsigned int group, unsigned long *configs,
				 unsigned int num_configs)
{
	const unsigned int *pins;
	unsigned int i, npins;
	int ret;

	ret = pinctrl_generic_get_group_pins(pctldev, group, &pins, &npins);
	if (ret)
		return ret;

	for (i = 0; i < npins; i++) {
		ret = mtk_pinconf_set(pctldev, pins[i], configs, num_configs);
		if (ret)
			return ret;
	}

	return 0;
}

static const struct pinctrl_ops mtk_pctlops = {
	.get_groups_count = pinctrl_generic_get_group_count,
	.get_group_name = pinctrl_generic_get_group_name,
	.get_group_pins = pinctrl_generic_get_group_pins,
	.dt_node_to_map = pinconf_generic_dt_node_to_map_all,
	.dt_free_map = pinconf_generic_dt_free_map,
};

static const struct pinmux_ops mtk_pmxops = {
	.get_functions_count = pinmux_generic_get_function_count,
	.get_function_name = pinmux_generic_get_function_name,
	.get_function_groups = pinmux_generic_get_function_groups,
	.set_mux = mtk_pinmux_set_mux,
	.gpio_request_enable = mtk_pinmux_gpio_request_enable,
	.gpio_set_direction = mtk_pinmux_gpio_set_direction,
	.strict = true,
};

static const struct pinconf_ops mtk_confops = {
	.is_generic = true,
	.pin_config_get = mtk_pinconf_get,
	.pin_config_set = mtk_pinconf_set,
	.pin_config_group_get = mtk_pinconf_group_get,
	.pin_config_group_set = mtk_pinconf_group_set,
	.pin_config_config_dbg_show = pinconf_generic_dump_config,
};

static struct pinctrl_desc mtk_desc = {
	.name = PINCTRL_PINCTRL_DEV,
	.pctlops = &mtk_pctlops,
	.pmxops = &mtk_pmxops,
	.confops = &mtk_confops,
	.owner = THIS_MODULE,
};

static int mtk_gpio_get(struct gpio_chip *chip, unsigned int gpio)
{
	struct mtk_pinctrl *hw = gpiochip_get_data(chip);
	int value, err;

	err = mtk_hw_get_value(hw, gpio, PINCTRL_PIN_REG_DI, &value);
	if (err)
		return err;

	return !!value;
}

static void mtk_gpio_set(struct gpio_chip *chip, unsigned int gpio, int value)
{
	struct mtk_pinctrl *hw = gpiochip_get_data(chip);

	mtk_hw_set_value(hw, gpio, PINCTRL_PIN_REG_DO, !!value);
}

static int mtk_gpio_direction_input(struct gpio_chip *chip, unsigned int gpio)
{
	return pinctrl_gpio_direction_input(chip->base + gpio);
}

static int mtk_gpio_direction_output(struct gpio_chip *chip, unsigned int gpio,
				     int value)
{
	mtk_gpio_set(chip, gpio, value);

	return pinctrl_gpio_direction_output(chip->base + gpio);
}

static int mtk_gpio_to_irq(struct gpio_chip *chip, unsigned int offset)
{
	struct mtk_pinctrl *hw = gpiochip_get_data(chip);
	unsigned long eint_n;

	if (!hw->eint)
		return -ENOTSUPP;

	eint_n = offset;

	return mtk_eint_find_irq(hw->eint, eint_n);
}

static int mtk_gpio_set_config(struct gpio_chip *chip, unsigned int offset,
			       unsigned long config)
{
	struct mtk_pinctrl *hw = gpiochip_get_data(chip);
	unsigned long eint_n;
	u32 debounce;

	if (!hw->eint ||
	    pinconf_to_config_param(config) != PIN_CONFIG_INPUT_DEBOUNCE)
		return -ENOTSUPP;

	debounce = pinconf_to_config_argument(config);
	eint_n = offset;

	return mtk_eint_set_debounce(hw->eint, eint_n, debounce);
}

static int mtk_build_gpiochip(struct mtk_pinctrl *hw, struct device_node *np)
{
	struct gpio_chip *chip = &hw->chip;
	int ret;

	chip->label		= PINCTRL_PINCTRL_DEV;
	chip->parent		= hw->dev;
	chip->request		= gpiochip_generic_request;
	chip->free		= gpiochip_generic_free;
	chip->direction_input	= mtk_gpio_direction_input;
	chip->direction_output	= mtk_gpio_direction_output;
	chip->get		= mtk_gpio_get;
	chip->set		= mtk_gpio_set;
	chip->to_irq		= mtk_gpio_to_irq,
	chip->set_config	= mtk_gpio_set_config,
	chip->base		= -1;
	chip->ngpio		= hw->soc->npins;
	chip->of_node		= np;
	chip->of_gpio_n_cells	= 2;

	ret = gpiochip_add_data(chip, hw);
	if (ret < 0)
		return ret;

	/* Just for backward compatible for these old pinctrl nodes without
	 * "gpio-ranges" property. Otherwise, called directly from a
	 * DeviceTree-supported pinctrl driver is DEPRECATED.
	 * Please see Section 2.1 of
	 * Documentation/devicetree/bindings/gpio/gpio.txt on how to
	 * bind pinctrl and gpio drivers via the "gpio-ranges" property.
	 */
	if (!of_find_property(np, "gpio-ranges", NULL)) {
		ret = gpiochip_add_pin_range(chip, dev_name(hw->dev), 0, 0,
					     chip->ngpio);
		if (ret < 0) {
			gpiochip_remove(chip);
			return ret;
		}
	}

	return 0;
}

static int mtk_build_groups(struct mtk_pinctrl *hw)
{
	int err, i;

	for (i = 0; i < hw->soc->ngrps; i++) {
		const struct group_desc *group = hw->soc->grps + i;

		err = pinctrl_generic_add_group(hw->pctrl, group->name,
						group->pins, group->num_pins,
						group->data);
		if (err < 0) {
			dev_err(hw->dev, "Failed to register group %s\n",
				group->name);
			return err;
		}
	}

	return 0;
}

static int mtk_build_functions(struct mtk_pinctrl *hw)
{
	int i, err;

	for (i = 0; i < hw->soc->nfuncs ; i++) {
		const struct function_desc *func = hw->soc->funcs + i;

		err = pinmux_generic_add_function(hw->pctrl, func->name,
						  func->group_names,
						  func->num_group_names,
						  func->data);
		if (err < 0) {
			dev_err(hw->dev, "Failed to register function %s\n",
				func->name);
			return err;
		}
	}

	return 0;
}

static int mtk_fill_base(strct mtk_pinctrl *hw) {

	hw->base[GPIO_BASE] = devm_ioremap_resource(&pdev->dev, res);
	if (IS_ERR(hw->base))
		return PTR_ERR(hw->base);

	node = of_find_compatible_node(NULL, NULL, "mediatek,iocfg_b");
	if (IS_ERR(node))
		return PTR_ERR(node);
	/* Setup IO addresses */
	hw->base[IOCFG_B_BASE] = of_iomap(node, 0);

	of_node_put(node);

	node = of_find_compatible_node(NULL, NULL, "mediatek,iocfg_r");
	if (IS_ERR(node))
		return PTR_ERR(node);
	/* Setup IO addresses */
	hw->base[IOCFG_R_BASE] = of_iomap(node, 0);

	of_node_put(node);

	node = of_find_compatible_node(NULL, NULL, "mediatek,iocfg_t");
	if (IS_ERR(node))
		return PTR_ERR(node);
	/* Setup IO addresses */
	hw->base[IOCFG_T_BASE] = of_iomap(node, 0);

	of_node_put(node);

	node = of_find_compatible_node(NULL, NULL, "mediatek,iocfg_l");
	if (IS_ERR(node))
		return PTR_ERR(node);
	/* Setup IO addresses */
	hw->base[IOCFG_L_BASE] = of_iomap(node, 0);

	of_node_put(node);

	return 0;
}

static int mtk_xt_get_gpio_n(void *data, unsigned long eint_n,
			     unsigned int *gpio_n,
			     struct gpio_chip **gpio_chip)
{
	struct mtk_pinctrl *hw = (struct mtk_pinctrl *)data;

	*gpio_chip = &hw->chip;
	*gpio_n = eint_n;

	return 0;
}

static int mtk_xt_get_gpio_state(void *data, unsigned long eint_n)
{
	struct mtk_pinctrl *hw = (struct mtk_pinctrl *)data;
	struct gpio_chip *gpio_chip;
	unsigned int gpio_n;
	int err;

	err = mtk_xt_get_gpio_n(hw, eint_n, &gpio_n, &gpio_chip);
	if (err)
		return err;

	return mtk_gpio_get(gpio_chip, gpio_n);
}

static int mtk_xt_set_gpio_as_eint(void *data, unsigned long eint_n)
{
	struct mtk_pinctrl *hw = (struct mtk_pinctrl *)data;
	struct gpio_chip *gpio_chip;
	unsigned int gpio_n;
	int err;

	err = mtk_xt_get_gpio_n(hw, eint_n, &gpio_n, &gpio_chip);
	if (err)
		return err;

	err = mtk_hw_set_value(hw, gpio_n, PINCTRL_PIN_REG_MODE,
			       MTK_GPIO_MODE);
	if (err)
		return err;

	err = mtk_hw_set_value(hw, gpio_n, PINCTRL_PIN_REG_DIR, MTK_INPUT);
	if (err)
		return err;

	err = mtk_hw_set_value(hw, gpio_n, PINCTRL_PIN_REG_SMT, MTK_ENABLE);
	if (err)
		return err;

	return 0;
}

static const struct mtk_eint_xt mtk_eint_xt = {
	.get_gpio_n = mtk_xt_get_gpio_n,
	.get_gpio_state = mtk_xt_get_gpio_state,
	.set_gpio_as_eint = mtk_xt_set_gpio_as_eint,
};

static int
mtk_build_eint(struct mtk_pinctrl *hw, struct platform_device *pdev)
{
	struct device_node *np = pdev->dev.of_node;
	struct resource *res;

	if (!IS_ENABLED(CONFIG_EINT_MTK))
		return 0;

	if (!of_property_read_bool(np, "interrupt-controller"))
		return -ENODEV;

	hw->eint = devm_kzalloc(hw->dev, sizeof(*hw->eint), GFP_KERNEL);
	if (!hw->eint)
		return -ENOMEM;

	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "eint");
	if (!res) {
		dev_err(&pdev->dev, "Unable to get eint resource\n");
		return -ENODEV;
	}

	hw->eint->base = devm_ioremap_resource(&pdev->dev, res);
	if (IS_ERR(hw->eint->base))
		return PTR_ERR(hw->eint->base);

	hw->eint->irq = irq_of_parse_and_map(np, 0);
	if (!hw->eint->irq)
		return -EINVAL;

	hw->eint->dev = &pdev->dev;
	hw->eint->hw = hw->soc->eint_hw;
	hw->eint->pctl = hw;
	hw->eint->gpio_xlate = &mtk_eint_xt;

	return mtk_eint_do_init(hw->eint);
}

static const struct of_device_id mtk_pinctrl_of_match[] = {
	{ .compatible = "mediatek,mt7622-pinctrl", .data = &mt7622_data},
	{ }
};

static int mtk_pinctrl_probe(struct platform_device *pdev)
{
	struct resource *res;
	struct mtk_pinctrl *hw;
	const struct of_device_id *of_id =
		of_match_device(mtk_pinctrl_of_match, &pdev->dev);
	int err;

	hw = devm_kzalloc(&pdev->dev, sizeof(*hw), GFP_KERNEL);
	if (!hw)
		return -ENOMEM;

	hw->soc = of_id->data;

	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
	if (!res) {
		dev_err(&pdev->dev, "missing IO resource\n");
		return -ENXIO;
	}

	hw->dev = &pdev->dev;
	err = mtk_fill_base(hw);
	if (err)
	{
		dev_err(&pdev->dev, "Failed to find registers base address");
		return err;
	}

	/* Setup pins descriptions per SoC types */
	mtk_desc.pins = hw->soc->pins;
	mtk_desc.npins = hw->soc->npins;
	mtk_desc.num_custom_params = ARRAY_SIZE(mtk_custom_bindings);
	mtk_desc.custom_params = mtk_custom_bindings;
#ifdef CONFIG_DEBUG_FS
	mtk_desc.custom_conf_items = mtk_conf_items;
#endif

	err = devm_pinctrl_register_and_init(&pdev->dev, &mtk_desc, hw,
					     &hw->pctrl);
	if (err)
		return err;

	/* Setup groups descriptions per SoC types */
	err = mtk_build_groups(hw);
	if (err) {
		dev_err(&pdev->dev, "Failed to build groups\n");
		return err;
	}

	/* Setup functions descriptions per SoC types */
	err = mtk_build_functions(hw);
	if (err) {
		dev_err(&pdev->dev, "Failed to build functions\n");
		return err;
	}

	/* For able to make pinctrl_claim_hogs, we must not enable pinctrl
	 * until all groups and functions are being added one.
	 */
	err = pinctrl_enable(hw->pctrl);
	if (err)
		return err;

	err = mtk_build_eint(hw, pdev);
	if (err)
		dev_warn(&pdev->dev,
			 "Failed to add EINT, but pinctrl still can work\n");

	/* Build gpiochip should be after pinctrl_enable is done */
	err = mtk_build_gpiochip(hw, pdev->dev.of_node);
	if (err) {
		dev_err(&pdev->dev, "Failed to add gpio_chip\n");
		return err;
	}

	platform_set_drvdata(pdev, hw);

	return 0;
}

static struct platform_driver mtk_pinctrl_driver = {
	.driver = {
		.name = "mtk-pinctrl",
		.of_match_table = mtk_pinctrl_of_match,
	},
	.probe = mtk_pinctrl_probe,
};

static int __init mtk_pinctrl_init(void)
{
	return platform_driver_register(&mtk_pinctrl_driver);
}
arch_initcall(mtk_pinctrl_init);












